/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.DossierUser;
import org.opencps.dossiermgt.model.DossierUserModel;
import org.opencps.dossiermgt.service.persistence.DossierUserPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierUser service. Represents a row in the &quot;opencps_dossieruser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierUserImpl}.
 * </p>
 *
 * @author huymq
 * @see DossierUserImpl
 * @see DossierUser
 * @see DossierUserModel
 * @generated
 */
@ProviderType
public class DossierUserModelImpl extends BaseModelImpl<DossierUser>
	implements DossierUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier user model instance should use the {@link DossierUser} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossieruser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "moderator", Types.INTEGER },
			{ "visited", Types.BOOLEAN },
			{ "roleId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("moderator", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("visited", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossieruser (uuid_ VARCHAR(75) null,dossierId LONG not null,userId LONG not null,moderator INTEGER,visited BOOLEAN,roleId LONG,primary key (dossierId, userId))";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossieruser";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierUser.id.dossierId ASC, dossierUser.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossieruser.dossierId ASC, opencps_dossieruser.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierUser"),
			true);
	public static final long DOSSIERID_COLUMN_BITMASK = 1L;
	public static final long ROLEID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierUser"));

	public DossierUserModelImpl() {
	}

	@Override
	public DossierUserPK getPrimaryKey() {
		return new DossierUserPK(_dossierId, _userId);
	}

	@Override
	public void setPrimaryKey(DossierUserPK primaryKey) {
		setDossierId(primaryKey.dossierId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DossierUserPK(_dossierId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DossierUserPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DossierUser.class;
	}

	@Override
	public String getModelClassName() {
		return DossierUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierId", getDossierId());
		attributes.put("userId", getUserId());
		attributes.put("moderator", getModerator());
		attributes.put("visited", isVisited());
		attributes.put("roleId", getRoleId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer moderator = (Integer)attributes.get("moderator");

		if (moderator != null) {
			setModerator(moderator);
		}

		Boolean visited = (Boolean)attributes.get("visited");

		if (visited != null) {
			setVisited(visited);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public int getModerator() {
		return _moderator;
	}

	@Override
	public void setModerator(int moderator) {
		_moderator = moderator;
	}

	@Override
	public boolean getVisited() {
		return _visited;
	}

	@Override
	public boolean isVisited() {
		return _visited;
	}

	@Override
	public void setVisited(boolean visited) {
		_visited = visited;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DossierUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierUserImpl dossierUserImpl = new DossierUserImpl();

		dossierUserImpl.setUuid(getUuid());
		dossierUserImpl.setDossierId(getDossierId());
		dossierUserImpl.setUserId(getUserId());
		dossierUserImpl.setModerator(getModerator());
		dossierUserImpl.setVisited(isVisited());
		dossierUserImpl.setRoleId(getRoleId());

		dossierUserImpl.resetOriginalValues();

		return dossierUserImpl;
	}

	@Override
	public int compareTo(DossierUser dossierUser) {
		DossierUserPK primaryKey = dossierUser.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierUser)) {
			return false;
		}

		DossierUser dossierUser = (DossierUser)obj;

		DossierUserPK primaryKey = dossierUser.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierUserModelImpl dossierUserModelImpl = this;

		dossierUserModelImpl._originalUuid = dossierUserModelImpl._uuid;

		dossierUserModelImpl._originalDossierId = dossierUserModelImpl._dossierId;

		dossierUserModelImpl._setOriginalDossierId = false;

		dossierUserModelImpl._originalUserId = dossierUserModelImpl._userId;

		dossierUserModelImpl._setOriginalUserId = false;

		dossierUserModelImpl._originalRoleId = dossierUserModelImpl._roleId;

		dossierUserModelImpl._setOriginalRoleId = false;

		dossierUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierUser> toCacheModel() {
		DossierUserCacheModel dossierUserCacheModel = new DossierUserCacheModel();

		dossierUserCacheModel.dossierUserPK = getPrimaryKey();

		dossierUserCacheModel.uuid = getUuid();

		String uuid = dossierUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierUserCacheModel.uuid = null;
		}

		dossierUserCacheModel.dossierId = getDossierId();

		dossierUserCacheModel.userId = getUserId();

		dossierUserCacheModel.moderator = getModerator();

		dossierUserCacheModel.visited = isVisited();

		dossierUserCacheModel.roleId = getRoleId();

		return dossierUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", moderator=");
		sb.append(getModerator());
		sb.append(", visited=");
		sb.append(isVisited());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moderator</column-name><column-value><![CDATA[");
		sb.append(getModerator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visited</column-name><column-value><![CDATA[");
		sb.append(isVisited());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierUser.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierUser.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _moderator;
	private boolean _visited;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private long _columnBitmask;
	private DossierUser _escapedModel;
}